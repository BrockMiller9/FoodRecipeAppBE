using FoodRecipeApp.Models;
using FoodRecipeApp.Models.DTOs;
using FoodRecipeApp.Repositories.Interface;
using Microsoft.EntityFrameworkCore;

namespace FoodRecipeApp.Repositories.Repository
{
    public class FavoriteRepository : IFavoriteRepository
    {
        private readonly AppDbContext _context;

        public FavoriteRepository(AppDbContext context)
        {
            _context = context;
        }




        public async Task AddToFavorites(Guid userId, int recipeId)
        {
           var favorite = new UserFavoriteRecipe
           {
                UserId = userId,
                RecipeId = recipeId
            };

            _context.UserFavoriteRecipes.Add(favorite);
            await _context.SaveChangesAsync();
        }

        public async Task<IEnumerable<Recipe>> GetUserFavorites(Guid userId)
        {
            return await _context.UserFavoriteRecipes
                .Where(f => f.UserId == userId)
                .Select(f => f.Recipe)
                .ToListAsync();
        }

        public async Task RemoveFromFavorites(Guid userId, int spoonacularId)
        {
            // First, find the recipe by SpoonacularId
            var recipe = await _context.Recipes
                .FirstOrDefaultAsync(r => r.SpoonacularId == spoonacularId);

            // If no recipe is found, then there's nothing to remove
            if (recipe == null) return;

            // Then find the favorite entry with the corresponding recipe Id
            var favorite = await _context.UserFavoriteRecipes
                .FirstOrDefaultAsync(f => f.UserId == userId && f.RecipeId == recipe.Id);

            // If the favorite entry exists, remove it
            if (favorite != null)
            {
                _context.UserFavoriteRecipes.Remove(favorite);
                await _context.SaveChangesAsync();
            }
        }




        public async Task AddRecipeAndFavorite(Guid userId, RecipeDto recipeDto)
        {
            // Check if the recipe already exists in the database by Spoonacular ID
            var existingRecipe = await _context.Recipes
                .FirstOrDefaultAsync(r => r.SpoonacularId == recipeDto.Id);

            // If not, add it
            if (existingRecipe == null)
            {
                var newRecipe = new Recipe
                {
                    SpoonacularId = recipeDto.Id, // Assuming you have a SpoonacularId property
                    Title = recipeDto.Title,
                    Image = recipeDto.Image,
                    Servings = recipeDto.Servings,
                    ReadyInMinutes = recipeDto.ReadyInMinutes,
                    SourceUrl = recipeDto.SourceUrl,
                    SpoonacularSourceUrl = recipeDto.SpoonacularSourceUrl
                };
                _context.Recipes.Add(newRecipe);
                await _context.SaveChangesAsync(); // Save changes so the new Recipe is inserted and tracked
                                                   // After saving, newRecipe will have the Id generated by the database
                existingRecipe = newRecipe; // Assign the newly added recipe to existingRecipe
            }

            // Check if the user has already favorited this recipe
            var existingFavorite = await _context.UserFavoriteRecipes
                .FirstOrDefaultAsync(ufr => ufr.UserId == userId && ufr.RecipeId == existingRecipe.Id);

            // If not, add to favorites
            if (existingFavorite == null)
            {
                var favorite = new UserFavoriteRecipe
                {
                    UserId = userId,
                    RecipeId = existingRecipe.Id // Use the ID generated by the database for the recipe
                };
                _context.UserFavoriteRecipes.Add(favorite);
                await _context.SaveChangesAsync();
            }
        }

        public async Task<bool> IsFavorite(Guid userId, int spoonacularId)
        {
            return await _context.UserFavoriteRecipes
                .Include(ufr => ufr.Recipe) // Include the Recipe entity
                .AnyAsync(ufr => ufr.UserId == userId && ufr.Recipe.SpoonacularId == spoonacularId);
        }


    }
}
